{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploy a Docker-based Lambda function from ECR with read-only access to EC2, VPCs, subnets, and other infrastructure",
  "Parameters": {
    "FunctionName": {
      "Type": "String",
      "Description": "The name of the Lambda function."
    },
    "AWSDataCollectorImageURI": {
      "Type": "String",
      "Default": "767397677341.dkr.ecr.ca-central-1.amazonaws.com/cloudsibyl-aws-data-collector",
      "Description": "The URI of the CloudSibyl ECR repository"
    },
    "ImageTag": {
      "Type": "String",
      "Default": "latest",
      "Description": "The tag of the Docker image to use."
    },
    "S3BucketName": {
      "Type": "String",
      "Description": "The name of the S3 bucket to which the Lambda function should have write access."
    },
    "ScheduleHour": {
      "Type": "Number",
      "Default": 21,
      "Description": "The hour of day (UTC) to run the Lambda function (0-23)."
    },
    "EnableEC2Metrics": {
      "Type": "String",
      "AllowedValues": ["true", "false"],
      "Default": "false",
      "Description": "Enable EC2 performance and reservation metrics (CPU Utilization, Memory Utilization, CPU Reservation, Memory Reservation, Network Utilization, Volume IOPS, Volume Throughput)"
    },
    "EnableRDSMetrics": {
      "Type": "String",
      "AllowedValues": ["true", "false"],
      "Default": "false",
      "Description": "Enable RDS performance metrics (CPU Utilization, Database Connections, Freeable Memory, Free Storage Space, Read/Write IOPS, Read/Write Throughput, Replica Lag)"
    },
    "EnableAuroraMetrics": {
      "Type": "String",
      "AllowedValues": ["true", "false"],
      "Default": "false",
      "Description": "Enable Aurora Serverless v2 specific metrics (Capacity Units)"
    },
    "EnableCloudFormation": {
      "Type": "String",
      "AllowedValues": ["true", "false"],
      "Default": "false",
      "Description": "Enable collecting CloudFormation data."
    },
    "EnableCarbonFootprint": {
      "Type": "String",
      "AllowedValues": ["true", "false"],
      "Default": "false",
      "Description": "Enable Carbon Footprint data collection for sustainability metrics."
    }
  },
  "Conditions": {
    "EnableEC2MetricsCondition": {"Fn::Equals": [{"Ref": "EnableEC2Metrics"}, "true"]},
    "EnableRDSMetricsCondition": {"Fn::Equals": [{"Ref": "EnableRDSMetrics"}, "true"]},
    "EnableAuroraMetricsCondition": {"Fn::Equals": [{"Ref": "EnableAuroraMetrics"}, "true"]},
    "EnableCloudFormationCondition": {"Fn::Equals": [{"Ref": "EnableCloudFormation"}, "true"]},
    "EnableCarbonFootprintCondition": {"Fn::Equals": [{"Ref": "EnableCarbonFootprint"}, "true"]},
    "AddCloudWatchPermission": {
      "Fn::Or": [
        {"Condition": "EnableEC2MetricsCondition"},
        {"Condition": "EnableRDSMetricsCondition"},
        {"Condition": "EnableAuroraMetricsCondition"}
      ]
    }
  },
  "Resources": {
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {"Fn::Sub": "${FunctionName}-execution-role"},
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LambdaBasicExecution",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "ec2:Describe*",
                    "lambda:ListFunctions",
                    "lambda:ListLayers",
                    "s3:ListAllMyBuckets",
                    "s3:ListBucket",
                    "organizations:ListAccounts",
                    "organizations:ListPolicies",
                    "sns:ListSubscriptions",
                    "sns:ListTopics",
                    "sqs:ListQueues",
                    "rds:Describe*",
                    "dynamodb:ListTables",
                    "ecs:ListClusters",
                    "ecs:ListServices",
                    "ecs:ListTasks",
                    "eks:ListClusters",
                    "eks:DescribeCluster",
                    "eks:ListFargateProfiles",
                    "elbv2:DescribeLoadBalancers",
                    "cloudfront:ListDistributions",
                    "cloudfront:ListFunctions",
                    "cloudwatch:ListDashboards",
                    "cloudwatch:ListMetrics",
                    "accessanizer:ListFindings",
                    "emr:ListClusters",
                    "emr:ListInstanceFleets",
                    "emr:ListNotebookExecutions",
                    "emr:ListStudioSessionMappings",
                    "route53:ListHostedZones",
                    "route53:ListResourceRecordSets",
                    "codecommit:ListRepositories",
                    "redshift:DescribeClusters",
                    "redshift-serverless:ListNamespaces",
                    "redshift-serverless:ListWorkgroups",
                    "efs:DescribeFileSystems",
                    "sagemaker:ListDomains",
                    "sagemaker:ListImages",
                    "sagemaker:ListModelPackages",
                    "sagemaker:ListModels",
                    "sagemaker:ListProjects",
                    "sagemaker:ListUserProfiles",
                    {"Fn::If": [
                      "AddCloudWatchPermission",
                      "cloudwatch:GetMetricStatistics",
                      {"Ref": "AWS::NoValue"}
                    ]},
                    "sustainability:GetCarbonFootprintSummary",
                    {"Fn::If": [
                      "EnableCloudFormationCondition",
                      "cloudformation:ListStacks",                     
                      {"Ref": "AWS::NoValue"}
                    ]},
                    {"Fn::If": [
                      "EnableCloudFormationCondition",
                      "cloudformation:DescribeStacks",
                      {"Ref": "AWS::NoValue"}
                    ]}
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": {"Ref": "FunctionName"},
        "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]},
        "PackageType": "Image",
        "Code": {"ImageUri": {"Fn::Sub": "${AWSDataCollectorImageURI}:${ImageTag}"}},
        "Environment": {
          "Variables": {
            "s3_bucket": {"Ref": "S3BucketName"},
            "account_id": {"Ref": "AWS::AccountId"}
          }
        },
        "Timeout": 900,
        "MemorySize": 512
      }
    },
    "EventBridgeRuleCPUUtilization": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetCPUUtilization",
            "Input": "{\"service\": \"CPUUtilization\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionCPUUtilization": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleCPUUtilization", "Arn"]}
      }
    },
    "EventBridgeRuleMemoryUtilization": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetMemoryUtilization",
            "Input": "{\"service\": \"mem_used_percent\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionMemoryUtilization": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleMemoryUtilization", "Arn"]}
      }
    },
    "EventBridgeRuleNetworkUtilization": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetNetworkUtilization",
            "Input": "{\"service\": \"NetworkUtilization\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionNetworkUtilization": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleNetworkUtilization", "Arn"]}
      }
    },
    "EventBridgeRuleVolumeIOPS": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetVolumeIOPS",
            "Input": "{\"service\": \"VolumeIOPS\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionVolumeIOPS": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleVolumeIOPS", "Arn"]}
      }
    },
    "EventBridgeRuleVolumeThroughput": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetVolumeThroughput",
            "Input": "{\"service\": \"VolumeThroughput\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionVolumeThroughput": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleVolumeThroughput", "Arn"]}
      }
    },
    "EventBridgeRuleCPUReservation": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetCPUReservation",
            "Input": "{\"service\": \"CPUReservation\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionCPUReservation": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleCPUReservation", "Arn"]}
      }
    },
    "EventBridgeRuleMemoryReservation": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetMemoryReservation",
            "Input": "{\"service\": \"MemoryReservation\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionMemoryReservation": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableEC2MetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleMemoryReservation", "Arn"]}
      }
    },
    "EventBridgeRuleCarbonFootprint": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableCarbonFootprintCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} L * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetCarbonFootprint",
            "Input": "{\"service\": \"carbon_footprint\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionCarbonFootprint": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableCarbonFootprintCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleCarbonFootprint", "Arn"]}
      }
    },
    "EventBridgeRuleCloudFormation": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableCloudFormationCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} L * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetCloudFormation",
            "Input": "{\"service\": \"cloudformation\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionCloudFormation": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableCloudFormationCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleCloudFormation", "Arn"]}
      }
    },
    "EventBridgeRuleRDSCPUUtilization": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetRDSCPUUtilization",
            "Input": "{\"service\": \"rds_cpu_utilization\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionRDSCPUUtilization": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleRDSCPUUtilization", "Arn"]}
      }
    },
    "EventBridgeRuleRDSDatabaseConnections": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetRDSDatabaseConnections",
            "Input": "{\"service\": \"rds_database_connections\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionRDSDatabaseConnections": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleRDSDatabaseConnections", "Arn"]}
      }
    },
    "EventBridgeRuleRDSFreeableMemory": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetRDSFreeableMemory",
            "Input": "{\"service\": \"rds_freeable_memory\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionRDSFreeableMemory": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleRDSFreeableMemory", "Arn"]}
      }
    },
    "EventBridgeRuleRDSFreeStorageSpace": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetRDSFreeStorageSpace",
            "Input": "{\"service\": \"rds_free_storage_space\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionRDSFreeStorageSpace": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleRDSFreeStorageSpace", "Arn"]}
      }
    },
    "EventBridgeRuleRDSReadIOPS": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetRDSReadIOPS",
            "Input": "{\"service\": \"rds_read_iops\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionRDSReadIOPS": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleRDSReadIOPS", "Arn"]}
      }
    },
    "EventBridgeRuleRDSWriteIOPS": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetRDSWriteIOPS",
            "Input": "{\"service\": \"rds_write_iops\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionRDSWriteIOPS": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleRDSWriteIOPS", "Arn"]}
      }
    },
    "EventBridgeRuleRDSReadThroughput": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetRDSReadThroughput",
            "Input": "{\"service\": \"rds_read_throughput\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionRDSReadThroughput": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleRDSReadThroughput", "Arn"]}
      }
    },
    "EventBridgeRuleRDSWriteThroughput": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetRDSWriteThroughput",
            "Input": "{\"service\": \"rds_write_throughput\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionRDSWriteThroughput": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleRDSWriteThroughput", "Arn"]}
      }
    },
    "EventBridgeRuleRDSReplicaLag": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetRDSReplicaLag",
            "Input": "{\"service\": \"rds_replica_lag\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionRDSReplicaLag": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableRDSMetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleRDSReplicaLag", "Arn"]}
      }
    },
    "EventBridgeRuleRDSAuroraCapacityUnits": {
      "Type": "AWS::Events::Rule",
      "Condition": "EnableAuroraMetricsCondition",
      "Properties": {
        "ScheduleExpression": {"Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
            "Id": "LambdaFunctionTargetRDSAuroraCapacityUnits",
            "Input": "{\"service\": \"rds_aurora_capacity_units\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionRDSAuroraCapacityUnits": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableAuroraMetricsCondition",
      "Properties": {
        "FunctionName": {"Ref": "LambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["EventBridgeRuleRDSAuroraCapacityUnits", "Arn"]}
      }
    },
    "EventBridgeRuleS3": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetS3",
            "Input": "{\"service\": \"s3\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionS3": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleS3",
            "Arn"
          ]
        }
      }
    },
    "EventBridgeRuleEC2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetEC2",
            "Input": "{\"service\": \"ec2\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionEC2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleEC2",
            "Arn"
          ]
        }
      }
    },
    "EventBridgeRuleECS": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetECS",
            "Input": "{\"service\": \"ecs\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionECS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleECS",
            "Arn"
          ]
        }
      }
    },
    "EventBridgeRuleCloudFront": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetCloudFront",
            "Input": "{\"service\": \"cloudfront\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionCloudFront": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleCloudFront",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleCloudTrail": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetCloudTrail",
            "Input": "{\"service\": \"cloudtrail\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionCloudTrail": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleCloudTrail",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleCloudWatch": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetCloudWatch",
            "Input": "{\"service\": \"cloudwatch\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionCloudWatch": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleCloudWatch",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleCodeCommit": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetCodeCommit",
            "Input": "{\"service\": \"codecommit\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionCodeCommit": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleCodeCommit",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleDynamoDB": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetDynamoDB",
            "Input": "{\"service\": \"dynamodb\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionDynamoDB": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleDynamoDB",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleEFS": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetEFS",
            "Input": "{\"service\": \"efs\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionEFS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleEFS",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleEKS": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetEKS",
            "Input": "{\"service\": \"eks\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionEKS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleEKS",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleELBv2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetELBv2",
            "Input": "{\"service\": \"elbv2\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionELBv2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleELBv2",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleEMR": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetEMR",
            "Input": "{\"service\": \"emr\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionEMR": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleEMR",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleEMRServerless": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetEMRServerless",
            "Input": "{\"service\": \"emr-serverless\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionEMRServerless": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleEMRServerless",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleLambda": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetLambda",
            "Input": "{\"service\": \"lambda\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleLambda",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleRDS": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetRDS",
            "Input": "{\"service\": \"rds\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionRDS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleRDS",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleRedshift": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetRedshift",
            "Input": "{\"service\": \"redshift\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionRedshift": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleRedshift",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleSageMaker": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetSageMaker",
            "Input": "{\"service\": \"sagemaker\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionSageMaker": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleSageMaker",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleSNS": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetSNS",
            "Input": "{\"service\": \"sns\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionSNS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleSNS",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleSQS": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetSQS",
            "Input": "{\"service\": \"sqs\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionSQS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleSQS",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleOrganization": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetOrganization",
            "Input": "{\"service\": \"organizations\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionOrganization": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleOrganization",
            "Arn"
          ]
        }
      }
    },

    "EventBridgeRuleSSM": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "cron(0 ${ScheduleHour} * * ? *)"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "LambdaFunctionTargetSSM",
            "Input": "{\"service\": \"ssm\"}"
          }
        ]
      }
    },
    "EventBridgeLambdaPermissionSSM": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventBridgeRuleSSM",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "LambdaFunctionName": {
      "Description": "The name of the Lambda function",
      "Value": {"Ref": "LambdaFunction"}
    },
    "LambdaFunctionArn": {
      "Description": "The ARN of the Lambda function",
      "Value": {"Fn::GetAtt": ["LambdaFunction", "Arn"]}
    }
  }
}